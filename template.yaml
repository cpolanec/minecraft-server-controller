AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: |
  Application for controlling the state of Minecraft game servers

Parameters:
  Environment:
    Type: String
    Description: Environment name will be appended to resource names
  FunctionRole:
    Type: String
    NoEcho: true
    Description: IAM role used in execution of Lambda functions
  EventBridgeRole:
    Type: String
    NoEcho: true
    Description: IAM role used in EventBridge rules
  StateMachineRole:
    Type: String
    NoEcho: true
    Description: IAM role used in StateMachine executions 
  ApiDomainName:
    Type: String
    NoEcho: true
    Description: Domain within an existing hosted zone for pretty URL configuration
  CertificateArn:
    Type: String
    NoEcho: true
    Description: ARN of an existing AWS managed certificate that supports the API domain
  HostedZoneId:
    Type: String
    NoEcho: true
    Description: Hosted Zone ID for the domain defined in 'ApiDomainName'

Outputs:
  StopAllServersWorkflowARN:
    Value: !GetAtt StopAllServersWorkflow.Arn
  StopIdleServersWorkflowARN:
    Value: !GetAtt StopIdleServersWorkflow.Arn

Conditions:
  IsMainConfig: !Equals [!Ref Environment, main]

Globals:
  Function:
    Runtime: python3.8
    Timeout: 10
    Tags:
      Application: minecraft
      Environment: !Ref Environment

Resources:
  # ---------------------------------------------
  #
  # State Machine workflows
  #

  HourlyEventsSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub minecraft-${Environment}-hourly-events
      State: !If [IsMainConfig, ENABLED, DISABLED]
      ScheduleExpression: 'rate(1 hour)'
      Targets:
        - Id: StopIdleServers
          Arn: !Ref StopIdleServersWorkflow
          RoleArn: !Ref EventBridgeRole
  
  NightlyEventsSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub minecraft-${Environment}-nightly-events
      State: !If [IsMainConfig, ENABLED, DISABLED]
      ScheduleExpression: 'cron(0 5 * * ? *)'
      Targets:
        - Id: StopAllServers
          Arn: !Ref StopAllServersWorkflow
          RoleArn: !Ref EventBridgeRole

  StopAllServersWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub minecraft-${Environment}-stopAllServers
      Role: !Ref StateMachineRole
      DefinitionUri: workflows/stop-all-servers.asl.json
      DefinitionSubstitutions:
        Environment: !Ref Environment
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StopAllServersLogGroup.Arn 
      Tags:
        Application: minecraft
        Environment: !Ref Environment

  StopAllServersLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/statemachine/minecraft-${Environment}-stopAllServers
      RetentionInDays: 30

  StopIdleServersWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub minecraft-${Environment}-stopIdleServers
      Role: !Ref StateMachineRole
      DefinitionUri: workflows/stop-idle-servers.asl.json
      DefinitionSubstitutions:
        Environment: !Ref Environment
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StopIdleServersLogGroup.Arn
      Tags:
        Application: minecraft
        Environment: !Ref Environment

  StopIdleServersLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/statemachine/minecraft-${Environment}-stopIdleServers
      RetentionInDays: 30

  # ---------------------------------------------
  #
  # API Gateway definition
  #

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Domain:
        DomainName: !Ref ApiDomainName
        CertificateArn: !Ref CertificateArn
        Route53:
          HostedZoneId: !Ref HostedZoneId
      StageName: !Ref Environment
      OpenApiVersion: 3.0.3
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          UsagePlanName: !Sub minecraft-${Environment}-usage-plan
          CreateUsagePlan: PER_API
          Throttle:
            RateLimit: 10
            BurstLimit: 10
          Quota:
            Limit: 1000
            Period: DAY
          Tags:
            - Key: Application
              Value: minecraft
            - Key: Environment
              Value: !Ref Environment
      MethodSettings:
        - HttpMethod: '*'
          ResourcePath: '/*'
          ThrottlingRateLimit: 10
          ThrottlingBurstLimit: 10
      Tags:
        Application: minecraft
        Environment: !Ref Environment

  # ---------------------------------------------
  #
  # /servers operations
  #

  GetServersOperation:
    Type: AWS::Serverless::Function
    DependsOn: GetServersOperationLogs
    Properties:
      FunctionName: !Sub minecraft-${Environment}-get-servers
      CodeUri: src/
      Handler: mcservers.get_handler
      Role: !Ref FunctionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /servers
            Method: get

  # https://github.com/aws/serverless-application-model/issues/851
  GetServersOperationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/minecraft-${Environment}-get-servers
      RetentionInDays: 30

  # ---------------------------------------------
  #
  # /servers/{name} operations
  #

  GetServerOperation:
    Type: AWS::Serverless::Function
    DependsOn: GetServerOperationLogs
    Properties:
      FunctionName: !Sub minecraft-${Environment}-get-server
      CodeUri: src/
      Handler: mcserver.get_handler
      Role: !Ref FunctionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /servers/{name}
            Method: get

  # https://github.com/aws/serverless-application-model/issues/851
  GetServerOperationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/minecraft-${Environment}-get-server
      RetentionInDays: 30

  PostServerOperation:
    Type: AWS::Serverless::Function
    DependsOn: PostServerOperationLogs
    Properties:
      FunctionName: !Sub minecraft-${Environment}-post-server
      CodeUri: src/
      Handler: mcserver.post_handler
      Role: !Ref FunctionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /servers/{name}
            Method: post

  # https://github.com/aws/serverless-application-model/issues/851
  PostServerOperationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/minecraft-${Environment}-post-server
      RetentionInDays: 30

  # ---------------------------------------------
  #
  # /servers/{name}/snapshots operations
  #

  GetSnapshotsOperation:
    Type: AWS::Serverless::Function
    DependsOn: GetSnapshotsOperationLogs
    Properties:
      FunctionName: !Sub minecraft-${Environment}-get-snapshots
      CodeUri: src/
      Handler: mcsnapshots.get_handler
      Role: !Ref FunctionRole
      Events:
        RootApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /snapshots
            Method: get
        ServerApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /servers/{name}/snapshots
            Method: get
  
  # https://github.com/aws/serverless-application-model/issues/851
  GetSnapshotsOperationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/minecraft-${Environment}-get-snapshots
      RetentionInDays: 30

  PostSnapshotOperation:
    Type: AWS::Serverless::Function
    DependsOn: PostSnapshotOperationLogs
    Properties:
      FunctionName: !Sub minecraft-${Environment}-post-snapshot
      CodeUri: src/
      Handler: mcsnapshots.post_handler
      Role: !Ref FunctionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /servers/{name}/snapshots
            Method: post
  
  # https://github.com/aws/serverless-application-model/issues/851
  PostSnapshotOperationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/minecraft-${Environment}-post-snapshot
      RetentionInDays: 30

  # ---------------------------------------------
  #
  # /servers/{name}/users operations
  #

  GetUsersOperation:
    Type: AWS::Serverless::Function
    DependsOn: GetUsersOperationLogs
    Properties:
      FunctionName: !Sub minecraft-${Environment}-get-users
      CodeUri: src/
      Handler: mcusers.get_handler
      Role: !Ref FunctionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /servers/{name}/users
            Method: get

  # https://github.com/aws/serverless-application-model/issues/851
  GetUsersOperationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/minecraft-${Environment}-get-users
      RetentionInDays: 30
